import os
import sys
import json
import subprocess
import platform
import zipfile
import urllib.request
import ctypes
from PyQt6.QtWidgets import (
    QApplication, QDialog, QVBoxLayout, QLabel, QProgressBar, QPushButton, QMessageBox,
    QMainWindow, QWidget, QHBoxLayout, QGridLayout, QTabWidget,
    QGroupBox, QLineEdit, QComboBox, QTextEdit, QScrollArea, QFileDialog,
    QCheckBox, QFormLayout, QStyle, QGraphicsDropShadowEffect
)
from PyQt6.QtCore import Qt, QThread, pyqtSignal
from PyQt6.QtGui import QFont, QColor, QPixmap

# –ü—Ä–∏ —É–ø–∞–∫–æ–≤–∫–µ –≤ –æ–¥–∏–Ω exe (PyInstaller --onefile) —Ñ–∞–π–ª –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏.
# –î–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–ø–∫—É —Ä—è–¥–æ–º —Å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º —Ñ–∞–π–ª–æ–º.
if getattr(sys, 'frozen', False):
    # APP_DIR - –ø–∞–ø–∫–∞ —Ä—è–¥–æ–º —Å exe (–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ñ–∞–π–ª .exe)
    APP_DIR = os.path.dirname(os.path.abspath(sys.argv[0]))
else:
    APP_DIR = os.path.dirname(os.path.abspath(__file__))

# RESOURCE_DIR - –ø–∞–ø–∫–∞ —Å —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏ (PyInstaller _MEIPASS) –∏–ª–∏ APP_DIR
RESOURCE_DIR = getattr(sys, '_MEIPASS', APP_DIR)

# config.json —Ö—Ä–∞–Ω–∏—Ç—Å—è —Ä—è–¥–æ–º —Å exe (APP_DIR) —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã–º
CONFIG_FILE = os.path.join(APP_DIR, "config.json")

# ========== FFmpeg –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ ==========
class FFmpegSetupThread(QThread):
    # progress can be a status string or an int (percent)
    progress = pyqtSignal(object)
    finished = pyqtSignal(bool, str)

    def run(self):
        try:
            app_dir = APP_DIR
            ffmpeg_dir = os.path.join(app_dir, "ffmpeg")
            ffmpeg_bin = os.path.join(ffmpeg_dir, "bin")

            if not os.path.exists(ffmpeg_bin):
                os.makedirs(ffmpeg_bin, exist_ok=True)

            zip_path = os.path.join(app_dir, "ffmpeg.zip")
            url = "https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip"

            self.progress.emit("üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ FFmpeg...")
            # Streaming download with progress reporting
            try:
                req = urllib.request.Request(url, headers={"User-Agent": "Mozilla/5.0"})
                with urllib.request.urlopen(req) as resp:
                    total = resp.getheader('Content-Length')
                    total = int(total) if total and total.isdigit() else None
                    downloaded = 0
                    chunk_size = 8192
                    with open(zip_path, 'wb') as out_f:
                        while True:
                            chunk = resp.read(chunk_size)
                            if not chunk:
                                break
                            out_f.write(chunk)
                            downloaded += len(chunk)
                            if total:
                                percent = int(downloaded * 100 / total)
                                # emit numeric progress
                                self.progress.emit(percent)
            except Exception as e:
                # fallback to urlretrieve if streaming fails
                try:
                    urllib.request.urlretrieve(url, zip_path)
                except Exception as e2:
                    self.progress.emit(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e2}")
                    self.finished.emit(False, "")
                    return

            self.progress.emit("üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞...")
            with zipfile.ZipFile(zip_path, "r") as zip_ref:
                zip_ref.extractall(app_dir)

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ZIP
            if os.path.exists(zip_path):
                os.remove(zip_path)

            # –ò—â–µ–º –ø–∞–ø–∫—É —Å —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–º ffmpeg
            extracted_dir = None
            for item in os.listdir(app_dir):
                if item.startswith("ffmpeg-") and os.path.isdir(os.path.join(app_dir, item)):
                    extracted_dir = os.path.join(app_dir, item)
                    break

            if extracted_dir:
                inner_bin = os.path.join(extracted_dir, "bin")
                import shutil
                # –ï—Å–ª–∏ –≤–Ω—É—Ç—Ä–∏ –µ—Å—Ç—å –ø–∞–ø–∫–∞ bin ‚Äî –ø–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã –æ—Ç—Ç—É–¥–∞
                if os.path.exists(inner_bin):
                    for file in os.listdir(inner_bin):
                        src = os.path.join(inner_bin, file)
                        dst = os.path.join(ffmpeg_bin, file)
                        try:
                            # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –∫–æ–ø–∏—Ä—É–µ–º
                            os.replace(src, dst)
                        except Exception:
                            try:
                                shutil.copy2(src, dst)
                            except Exception:
                                pass
                    shutil.rmtree(extracted_dir, ignore_errors=True)
                else:
                    # –ï—Å–ª–∏ bin –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—â–µ–º –±–∏–Ω–∞—Ä–Ω–∏–∫–∏ –ø–æ –¥–µ—Ä–µ–≤—É –∏ –∫–æ–ø–∏—Ä—É–µ–º
                    for root, dirs, files in os.walk(extracted_dir):
                        for fname in files:
                            if fname.lower() in ("ffmpeg.exe", "ffprobe.exe"):
                                src = os.path.join(root, fname)
                                dst = os.path.join(ffmpeg_bin, fname)
                                try:
                                    shutil.copy2(src, dst)
                                except Exception:
                                    pass
                    shutil.rmtree(extracted_dir, ignore_errors=True)

            ffmpeg_path = os.path.join(ffmpeg_bin, "ffmpeg.exe")
            ffprobe_path = os.path.join(ffmpeg_bin, "ffprobe.exe")

            if os.path.exists(ffmpeg_path) and os.path.exists(ffprobe_path):
                with open(CONFIG_FILE, "w", encoding="utf-8") as f:
                    json.dump({
                        "ffmpeg_installed": True,
                        "ffmpeg_path": ffmpeg_path,
                        "ffprobe_path": ffprobe_path
                    }, f, indent=4, ensure_ascii=False)
                self.progress.emit("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                self.finished.emit(True, ffmpeg_path)
            else:
                self.progress.emit("‚ùå –û—à–∏–±–∫–∞: FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏.")
                self.finished.emit(False, "")
        except Exception as e:
            self.progress.emit(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.finished.emit(False, "")

class FFmpegSetupDialog(QDialog):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ FFmpeg")
        self.setFixedSize(420, 200)
        self.setWindowFlags(Qt.WindowType.WindowStaysOnTopHint)

        self.layout = QVBoxLayout(self)
        self.label = QLabel("–ü—Ä–æ–≤–µ—Ä–∫–∞ FFmpeg...", self)
        self.label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.btn_close = QPushButton("–ó–∞–∫—Ä—ã—Ç—å", self)
        self.btn_close.setEnabled(False)
        self.btn_close.clicked.connect(self.accept)

        self.layout.addWidget(self.label)
        # –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (0..100)
        self.progress = QProgressBar(self)
        self.progress.setRange(0, 100)
        self.progress.setValue(0)
        self.layout.addWidget(self.progress)
        self.layout.addWidget(self.btn_close)

        self.thread = FFmpegSetupThread()
        self.thread.progress.connect(self.update_status)
        self.thread.finished.connect(self.finish)
        self.thread.start()

    def update_status(self, message):
        # message can be int (percent) or str (status)
        try:
            if isinstance(message, int):
                self.progress.setValue(message)
                self.label.setText(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ... {message}%")
            else:
                self.label.setText(str(message))
                # If message contains an emoji or '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', set progress to 100
                if isinstance(message, str) and ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" in message or "‚úÖ" in message):
                    self.progress.setValue(100)
        except Exception:
            # Fallback: set label
            self.label.setText(str(message))

    def finish(self, success, ffmpeg_path):
        self.progress.setRange(0, 1)
        if success:
            self.label.setText("FFmpeg —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        else:
            self.label.setText("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ FFmpeg.")
        self.btn_close.setEnabled(True)

# ========== –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ==========
class NotificationDialog(QDialog):
    def __init__(self, output_file, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
        if parent is not None:
            try:
                self.setWindowIcon(parent.windowIcon())
            except:
                pass
        self.setFixedSize(350, 150)
        
        layout = QVBoxLayout()
        
        message = QLabel("–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        message.setAlignment(Qt.AlignmentFlag.AlignCenter)
        message.setStyleSheet("font-size: 14px; font-weight: bold;")
        layout.addWidget(message)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        btn_layout = QHBoxLayout()
        
        self.btn_play = QPushButton("–í–∫–ª—é—á–∏—Ç—å –≤–∏–¥–µ–æ")
        self.btn_play.setIcon(self.style().standardIcon(QStyle.StandardPixmap.SP_MediaPlay))
        self.btn_play.clicked.connect(lambda: self.play_video(output_file))
        btn_layout.addWidget(self.btn_play)
        
        self.btn_open_folder = QPushButton("–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É")
        self.btn_open_folder.setIcon(self.style().standardIcon(QStyle.StandardPixmap.SP_DirIcon))
        self.btn_open_folder.clicked.connect(lambda: self.open_folder(output_file))
        btn_layout.addWidget(self.btn_open_folder)
        
        self.btn_cancel = QPushButton("–û—Ç–º–µ–Ω–∞")
        self.btn_cancel.setIcon(self.style().standardIcon(QStyle.StandardPixmap.SP_DialogCancelButton))
        self.btn_cancel.clicked.connect(self.reject)
        btn_layout.addWidget(self.btn_cancel)
        
        layout.addLayout(btn_layout)
        self.setLayout(layout)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        self.setStyleSheet("""
            QDialog {
                background-color: #FFFFFF;
            }
            QPushButton {
                padding: 8px 12px;
                font-size: 12px;
            }
        """)
    
    def play_video(self, file_path):
        if os.path.exists(file_path):
            if platform.system() == 'Windows':
                os.startfile(file_path)
            elif platform.system() == 'Darwin':  # macOS
                subprocess.call(('open', file_path))
            else:  # linux
                subprocess.call(('xdg-open', file_path))
        self.accept()
    
    def open_folder(self, file_path):
        folder_path = os.path.dirname(file_path)
        if os.path.exists(folder_path):
            if platform.system() == 'Windows':
                os.startfile(folder_path)
            elif platform.system() == 'Darwin':  # macOS
                subprocess.call(('open', folder_path))
            else:  # linux
                subprocess.call(('xdg-open', folder_path))
        self.accept()

class VideoConverter(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Cine Convert")
        self.setGeometry(100, 100, 1000, 700)
        self.settings = {  # <-- –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!
            "show_video_notifications": True,
            "show_audio_notifications": True
        }
        # –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        self.translations = {}
        self.locales_map = {}
        self.setup_ui()
        self.setup_styles()
        self.input_file = ""
        self.output_file = ""
        self.video_info = {}
        self.input_files = []  # –î–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        # –ü—É—Ç–∏ –∫ FFmpeg/FFprobe –±—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –±–ª–æ–∫–∞
        self.ffmpeg_path = "ffmpeg"
        self.ffprobe_path = "ffprobe"
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–∫–∞–ª–µ–π –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π
        try:
            self.load_locales()
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            if os.path.exists(CONFIG_FILE):
                try:
                    with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                        cfg = json.load(f)
                        lang = cfg.get('language')
                        if lang:
                            self.apply_locale(lang)
                except Exception:
                    pass
        except Exception:
            pass

    def setup_ui(self):
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ–π
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)
        main_layout.setSpacing(10)
        main_layout.setContentsMargins(15, 15, 15, 15)

        # –ì—Ä—É–ø–ø–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        source_group = QGroupBox("–ò—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ")
        source_group.setObjectName("group_source")
        source_layout = QHBoxLayout(source_group)
        self.input_path = QLineEdit()
        self.input_path.setObjectName("input_path")
        self.input_path.setPlaceholderText("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª...")
        btn_browse_input = QPushButton("–û–±–∑–æ—Ä...")
        btn_browse_input.setObjectName("btn_browse_input")
        btn_browse_input.clicked.connect(self.select_input_file)
        source_layout.addWidget(self.input_path)
        source_layout.addWidget(btn_browse_input)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
        btn_browse_multi = QPushButton("–í—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ...")
        btn_browse_multi.setObjectName("btn_browse_multi")
        btn_browse_multi.clicked.connect(self.select_input_files)
        source_layout.addWidget(btn_browse_multi)

        # –ì—Ä—É–ø–ø–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        output_group = QGroupBox("–í—ã—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ")
        output_group.setObjectName("group_output")
        output_layout = QHBoxLayout(output_group)
        self.output_path = QLineEdit()
        self.output_path.setObjectName("output_path")
        self.output_path.setPlaceholderText("–ö—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
        btn_browse_output = QPushButton("–û–±–∑–æ—Ä...")
        btn_browse_output.setObjectName("btn_browse_output")
        btn_browse_output.clicked.connect(self.select_output_file)
        output_layout.addWidget(self.output_path)
        output_layout.addWidget(btn_browse_output)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–µ–π–∞—É—Ç
        main_layout.addWidget(source_group)
        main_layout.addWidget(output_group)

        # –ì—Ä—É–ø–ø–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
        info_group = QGroupBox("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ")
        info_group.setObjectName("group_info")
        info_layout = QVBoxLayout(info_group)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –±–ª–æ–∫–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        self.info_container = QWidget()
        self.info_grid = QGridLayout(self.info_container)
        self.info_grid.setSpacing(15)
        self.info_grid.setContentsMargins(10, 10, 10, 10)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—É—é –æ–±–ª–∞—Å—Ç—å
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setWidget(self.info_container)
        
        info_layout.addWidget(scroll_area)
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å: –ø—Ä–µ–≤—å—é
        preview_group = QGroupBox("–ü—Ä–µ–≤—å—é")
        preview_group.setObjectName("group_preview")
        preview_layout = QVBoxLayout(preview_group)
        self.preview_label = QLabel("–ü—Ä–µ–≤—å—é –±—É–¥–µ—Ç –∑–¥–µ—Å—å...")
        self.preview_label.setObjectName("preview_label")
        self.preview_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.preview_label.setFixedSize(300, 180)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø—Ä–µ–≤—å—é
        preview_layout.addWidget(self.preview_label)
        
        # –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –ø—Ä–µ–≤—å—é
        info_preview_layout = QHBoxLayout()
        info_preview_layout.addWidget(info_group, 60)  # 60% —à–∏—Ä–∏–Ω—ã
        info_preview_layout.addWidget(preview_group, 40)  # 40% —à–∏—Ä–∏–Ω—ã
        
        main_layout.addLayout(info_preview_layout)

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.tabs = QTabWidget()
        self.tabs.setObjectName("main_tabs")
        self.tabs.setDocumentMode(True)
        self.tabs.setTabBarAutoHide(False)
        main_layout.addWidget(self.tabs)

        # –í–∫–ª–∞–¥–∫–∞ –≤–∏–¥–µ–æ
        self.setup_video_tab()
        # –í–∫–ª–∞–¥–∫–∞ –∞—É–¥–∏–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.setup_audio_settings_tab()
        # –í–∫–ª–∞–¥–∫–∞ –∞—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        self.setup_audio_extract_tab()
        # –í–∫–ª–∞–¥–∫–∞ –ª–æ–≥–æ–≤
        self.setup_log_tab()
        # –í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.setup_settings_tab()

        # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        self.batch_status_label = QLabel("")
        self.batch_status_label.setObjectName("batch_status_label")
        self.batch_status_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.batch_status_label.setStyleSheet("font-size: 13px; color: #333;")
        self.batch_status_label.setMinimumHeight(22)
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
        self.centralWidget().layout().addWidget(self.batch_status_label)
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_bar = QProgressBar()
        self.progress_bar.setObjectName("main_progress_bar")
        self.progress_bar.setTextVisible(True)
        self.progress_bar.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.progress_bar.setMaximumHeight(20)
        self.centralWidget().layout().addWidget(self.progress_bar)

    def setup_video_tab(self):
        tab = QWidget()
        layout = QGridLayout(tab)
        layout.setSpacing(10)
        layout.setContentsMargins(10, 10, 10, 10)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        settings_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ")
        grid = QGridLayout(settings_group)
        
        # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        grid.addWidget(QLabel("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ:"), 0, 0)
        self.resolution = QComboBox()
        self.resolution.addItems(["–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π", "4K (3840x2160)", "1440p (2560x1440)", "1080p (1920x1080)", 
                                 "720p (1280x720)", "480p (854x480)", "360p (640x360)", 
                                 "240p (426x240)", "144p (256x144)", "128p (256x128)"])
        grid.addWidget(self.resolution, 0, 1)
        
        # –ö–æ–¥–µ–∫
        grid.addWidget(QLabel("–ö–æ–¥–µ–∫:"), 1, 0)
        self.video_codec = QComboBox()
        self.video_codec.addItems(["–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π", "libx264", "libx265", "h264_nvenc", "hevc_nvenc", "vp9", "av1"])
        grid.addWidget(self.video_codec, 1, 1)
        
        # –§–æ—Ä–º–∞—Ç
        grid.addWidget(QLabel("–§–æ—Ä–º–∞—Ç:"), 2, 0)
        self.format = QComboBox()
        self.format.addItems(["mp4", "mkv", "mov", "avi", "flv", "webm"])
        grid.addWidget(self.format, 2, 1)
        
        # –ë–∏—Ç—Ä–µ–π—Ç
        grid.addWidget(QLabel("–ë–∏—Ç—Ä–µ–π—Ç:"), 3, 0)
        self.bitrate = QComboBox()
        self.bitrate.setEditable(True)
        self.bitrate.addItems(["–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π", "500k", "1M", "2M", "5M", "10M", "20M"])
        grid.addWidget(self.bitrate, 3, 1)

        # –ö–Ω–æ–ø–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        self.btn_render = QPushButton("–ù–∞—á–∞—Ç—å —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∏–¥–µ–æ")
        self.btn_render.clicked.connect(self.start_video_render)
        self.btn_render.setMinimumHeight(35)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –≤–∫–ª–∞–¥–∫—É
        layout.addWidget(settings_group, 0, 0, 1, 2)
        layout.addWidget(self.btn_render, 1, 0, 1, 2)
        
        self.tabs.addTab(tab, "–í–∏–¥–µ–æ")

    def setup_audio_settings_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É–¥–∏–æ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ"""
        tab = QWidget()
        layout = QGridLayout(tab)
        layout.setSpacing(10)
        layout.setContentsMargins(10, 10, 10, 10)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ
        settings_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ –¥–ª—è –≤–∏–¥–µ–æ")
        grid = QGridLayout(settings_group)
        
        # –ê—É–¥–∏–æ –∫–æ–¥–µ–∫
        grid.addWidget(QLabel("–ê—É–¥–∏–æ –∫–æ–¥–µ–∫:"), 0, 0)
        self.audio_codec = QComboBox()
        self.audio_codec.addItems(["–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π", "aac", "mp3", "flac", "opus", "ac3"])
        grid.addWidget(self.audio_codec, 0, 1)
        
        # –ë–∏—Ç—Ä–µ–π—Ç –∞—É–¥–∏–æ
        grid.addWidget(QLabel("–ë–∏—Ç—Ä–µ–π—Ç –∞—É–¥–∏–æ:"), 1, 0)
        self.audio_bitrate = QComboBox()
        self.audio_bitrate.setEditable(True)
        self.audio_bitrate.addItems(["–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π", "64k", "128k", "192k", "256k", "320k"])
        grid.addWidget(self.audio_bitrate, 1, 1)
        
        # –ö–∞–Ω–∞–ª—ã
        grid.addWidget(QLabel("–ö–∞–Ω–∞–ª—ã:"), 2, 0)
        self.audio_channels = QComboBox()
        self.audio_channels.addItems(["–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π", "1 (–º–æ–Ω–æ)", "2 (—Å—Ç–µ—Ä–µ–æ)", "5.1", "7.1"])
        grid.addWidget(self.audio_channels, 2, 1)
        
        layout.addWidget(settings_group)
        self.tabs.addTab(tab, "–ê—É–¥–∏–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

    def setup_audio_extract_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setSpacing(10)
        layout.setContentsMargins(10, 10, 10, 10)
        
        # –ì—Ä—É–ø–ø–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∞—É–¥–∏–æ
        audio_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ")
        vbox = QVBoxLayout(audio_group)
        
        hbox = QHBoxLayout()
        hbox.addWidget(QLabel("–§–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ:"))
        self.audio_format = QComboBox()
        self.audio_format.addItems(["mp3", "aac", "flac", "wav", "ogg", "ac3"])
        hbox.addWidget(self.audio_format)
        hbox.addStretch()
        vbox.addLayout(hbox)
        
        # –ö–Ω–æ–ø–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ
        self.btn_extract = QPushButton("–ò–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ")
        self.btn_extract.clicked.connect(self.extract_audio)
        self.btn_extract.setMinimumHeight(35)
        vbox.addWidget(self.btn_extract)
        
        layout.addWidget(audio_group)
        layout.addStretch(1)
        self.tabs.addTab(tab, "–ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ")

    def setup_log_tab(self):
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setContentsMargins(10, 10, 10, 10)
        
        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        self.log_text.setFont(QFont("Consolas", 9))
        
        layout.addWidget(self.log_text)
        self.tabs.addTab(tab, "–õ–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")

    def setup_settings_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setSpacing(15)
        layout.setContentsMargins(15, 15, 15, 15)
        
        # –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notification_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        form_layout = QFormLayout(notification_group)
        
        self.chk_video_notify = QCheckBox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –≤–∏–¥–µ–æ")
        self.chk_video_notify.setChecked(self.settings["show_video_notifications"])
        form_layout.addRow(self.chk_video_notify)
        
        self.chk_audio_notify = QCheckBox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ")
        self.chk_audio_notify.setChecked(self.settings["show_audio_notifications"])
        form_layout.addRow(self.chk_audio_notify)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        btn_save = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        btn_save.clicked.connect(self.save_settings)
        btn_save.setMinimumHeight(35)
        
        layout.addWidget(notification_group)
        # –ì—Ä—É–ø–ø–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        language_group = QGroupBox("–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        lang_layout = QHBoxLayout(language_group)
        self.locale_combo = QComboBox()
        self.locale_combo.setEditable(False)
        btn_apply_locale = QPushButton("–ü—Ä–∏–º–µ–Ω–∏—Ç—å")
        btn_apply_locale.clicked.connect(self.on_apply_locale)
        btn_refresh_locales = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫")
        btn_refresh_locales.clicked.connect(self.load_locales)
        btn_open_locales = QPushButton("–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –ª–æ–∫–∞–ª–µ–π")
        btn_open_locales.clicked.connect(self.open_locales_folder)
        lang_layout.addWidget(self.locale_combo)
        lang_layout.addWidget(btn_apply_locale)
        lang_layout.addWidget(btn_refresh_locales)
        lang_layout.addWidget(btn_open_locales)
        layout.addWidget(language_group)
        layout.addWidget(btn_save)
        layout.addStretch(1)
        
        self.tabs.addTab(tab, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")

    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        self.settings["show_video_notifications"] = self.chk_video_notify.isChecked()
        self.settings["show_audio_notifications"] = self.chk_audio_notify.isChecked()
        QMessageBox.information(self, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ config
        try:
            cfg = {}
            if os.path.exists(CONFIG_FILE):
                try:
                    with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                        cfg = json.load(f)
                except Exception:
                    cfg = {}
            cfg['show_video_notifications'] = self.chk_video_notify.isChecked()
            cfg['show_audio_notifications'] = self.chk_audio_notify.isChecked()
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–∫–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
            if hasattr(self, 'locale_combo') and self.locale_combo.currentData():
                cfg['language'] = self.locale_combo.currentData()
            with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
                json.dump(cfg, f, ensure_ascii=False, indent=4)
        except Exception:
            pass

    def load_locales(self):
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É locales —Ä—è–¥–æ–º —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç self.locale_combo."""
        app_dir = APP_DIR
        # –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–∑ PyInstaller —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –º–æ–≥—É—Ç –±—ã—Ç—å –≤ RESOURCE_DIR
        # –ß–∏—Ç–∞–µ–º –ª–æ–∫–∞–ª–∏ –∏–∑ RESOURCE_DIR –µ—Å–ª–∏ —Ç–∞–º –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∏–∑ APP_DIR
        locales_dir = os.path.join(RESOURCE_DIR, 'locales') if os.path.exists(os.path.join(RESOURCE_DIR, 'locales')) else os.path.join(app_dir, 'locales')
        # –°–æ–∑–¥–∞–¥–∏–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        try:
            os.makedirs(locales_dir, exist_ok=True)
        except Exception:
            pass

        self.locales_map = {}
        self.locale_combo.clear()
        try:
            files = [f for f in os.listdir(locales_dir) if f.lower().endswith('.json')]
            for fname in sorted(files):
                code = os.path.splitext(fname)[0]
                path = os.path.join(locales_dir, fname)
                # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ–ª–µ 'name' –≤–Ω—É—Ç—Ä–∏ JSON —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ–µ –∏–º—è
                display = code
                try:
                    with open(path, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                        if isinstance(data, dict) and data.get('name'):
                            display = f"{data.get('name')} ({code})"
                except Exception:
                    pass
                self.locales_map[code] = path
                self.locale_combo.addItem(display, code)
        except Exception:
            pass

    def open_locales_folder(self):
        app_dir = APP_DIR
        locales_dir = os.path.join(app_dir, 'locales')
        try:
            if platform.system() == 'Windows':
                os.startfile(locales_dir)
            elif platform.system() == 'Darwin':
                subprocess.call(('open', locales_dir))
            else:
                subprocess.call(('xdg-open', locales_dir))
        except Exception as e:
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', f'–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –ª–æ–∫–∞–ª–µ–π: {e}')

    def on_apply_locale(self):
        code = None
        if hasattr(self, 'locale_combo'):
            code = self.locale_combo.currentData()
        if not code:
            QMessageBox.information(self, '–í–Ω–∏–º–∞–Ω–∏–µ', '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ª–æ–∫–∞–ª–∏.')
            return
        self.apply_locale(code)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ config
        try:
            cfg = {}
            if os.path.exists(CONFIG_FILE):
                try:
                    with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                        cfg = json.load(f)
                except Exception:
                    cfg = {}
            cfg['language'] = code
            with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
                json.dump(cfg, f, ensure_ascii=False, indent=4)
        except Exception:
            pass

    def apply_locale(self, code):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON –ª–æ–∫–∞–ª–∏ –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã –∫ –∫–ª—é—á–µ–≤—ã–º –≤–∏–¥–∂–µ—Ç–∞–º."""
        path = self.locales_map.get(code) if hasattr(self, 'locales_map') else None
        if not path or not os.path.exists(path):
            return
        try:
            with open(path, 'r', encoding='utf-8') as f:
                data = json.load(f)
        except Exception:
            return
        if not isinstance(data, dict):
            return
        self.translations = data
        t = self.translations
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: —Å–Ω–∞—á–∞–ª–∞ –ø–æ objectName, –∑–∞—Ç–µ–º –ø–æ —Ç–µ–∫—É—â–µ–º—É —Ç–µ–∫—Å—Ç—É/placeholder
        def _set_text_by_type(w, text):
            try:
                from PyQt6.QtWidgets import QPushButton, QLabel, QGroupBox, QCheckBox, QLineEdit, QComboBox, QTextEdit
                # –ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–∏–¥–∂–µ—Ç–∞
                if isinstance(w, QPushButton):
                    w.setText(text)
                    return True
                if isinstance(w, QLabel):
                    w.setText(text)
                    return True
                if isinstance(w, QGroupBox):
                    w.setTitle(text)
                    return True
                if isinstance(w, QCheckBox):
                    w.setText(text)
                    return True
                if isinstance(w, QLineEdit):
                    w.setPlaceholderText(text)
                    return True
                if isinstance(w, QComboBox):
                    # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –¥–∞—ë—Ç —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è combobox ‚Äî –ø—Ä–∏–º–µ–Ω–∏–º
                    if isinstance(text, (list, tuple)):
                        try:
                            w.clear()
                            w.addItems([str(i) for i in text])
                            return True
                        except Exception:
                            pass
                    else:
                        # –ò–Ω–∞—á–µ, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –æ–¥–Ω–∏–º –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ‚Äî –∑–∞–º–µ–Ω–∏–º –µ–≥–æ
                        try:
                            for i in range(w.count()):
                                item = w.itemText(i)
                                if item in t and isinstance(t[item], str):
                                    w.setItemText(i, t[item])
                            return True
                        except Exception:
                            pass
                if isinstance(w, QTextEdit):
                    # –ù–µ —Ç—Ä–æ–≥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥–æ–≤
                    return False
            except Exception:
                pass
            return False

        # Window title
        if t.get('window_title'):
            try:
                self.setWindowTitle(t.get('window_title'))
            except Exception:
                pass

        # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º —è–≤–Ω—ã–µ –∫–ª—é—á–∏, –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–¥–∞–Ω—ã (—Å—Ç–∞—Ä—ã–π —Å—Ç–∏–ª—å JSON)
        explicit_map = {
            'btn_render': getattr(self, 'btn_render', None),
            'btn_extract': getattr(self, 'btn_extract', None),
            'chk_video_notify': getattr(self, 'chk_video_notify', None),
            'chk_audio_notify': getattr(self, 'chk_audio_notify', None)
        }
        for key, widget in explicit_map.items():
            if widget and t.get(key):
                try:
                    _set_text_by_type(widget, t.get(key))
                except Exception:
                    pass

        # –í–∫–ª–∞–¥–∫–∏: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ —Å—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏ –∏ –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—É—â–µ–º—É —Ç–µ–∫—Å—Ç—É
        try:
            for idx in range(self.tabs.count()):
                current = self.tabs.tabText(idx)
                # —Å–Ω–∞—á–∞–ª–∞ –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∏–º–µ–Ω–∞–º
                if idx == 0 and t.get('tab_video'):
                    self.tabs.setTabText(idx, t.get('tab_video'))
                    continue
                if idx == 1 and t.get('tab_audio_settings'):
                    self.tabs.setTabText(idx, t.get('tab_audio_settings'))
                    continue
                if idx == 2 and t.get('tab_audio_extract'):
                    self.tabs.setTabText(idx, t.get('tab_audio_extract'))
                    continue
                if idx == 3 and t.get('tab_logs'):
                    self.tabs.setTabText(idx, t.get('tab_logs'))
                    continue
                if idx == 4 and t.get('tab_settings'):
                    self.tabs.setTabText(idx, t.get('tab_settings'))
                    continue
                # –∏–Ω–∞—á–µ –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ —Ç–µ–∫—É—â–µ–º—É —Ç–µ–∫—Å—Ç—É
                if current and isinstance(current, str) and current in t and isinstance(t[current], str):
                    self.tabs.setTabText(idx, t[current])
        except Exception:
            pass

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –≤–∏–¥–∂–µ—Ç–∞–º –∏ –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–≤–µ—Å—Ç–∏
        try:
            for w in self.findChildren(QWidget):
                try:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º QTabWidget —Å–∞–º–∏—Ö –≤–∫–ª–∞–¥–æ–∫ (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏)
                    if w is self.tabs:
                        continue
                    obj = w.objectName() if hasattr(w, 'objectName') else None
                    applied = False
                    # 1) –ü–æ objectName
                    if obj:
                        # –í JSON –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ –ø—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, —Ç–∞–∫ –∏ —Å–ø–∏—Å–æ–∫ –¥–ª—è combobox
                        if obj in t:
                            applied = _set_text_by_type(w, t[obj])
                            if applied:
                                continue
                        # –¢–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å ".items" –¥–ª—è —Å–ø–∏—Å–∫–æ–≤
                        items_key = f"{obj}.items"
                        if items_key in t and isinstance(t[items_key], (list, tuple)) and isinstance(w, QComboBox):
                            try:
                                w.clear()
                                w.addItems([str(i) for i in t[items_key]])
                                continue
                            except Exception:
                                pass

                    # 2) –ü–æ —Ç–µ–∫—É—â–µ–º—É —Ç–µ–∫—Å—Ç—É (–¥–ª—è QPushButton, QLabel, QGroupBox, QCheckBox)
                    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                    cur_texts = []
                    try:
                        # label-like
                        if hasattr(w, 'text'):
                            cur_texts.append(w.text())
                    except Exception:
                        pass
                    try:
                        if hasattr(w, 'placeholderText'):
                            cur = w.placeholderText()
                            if cur:
                                cur_texts.append(cur)
                    except Exception:
                        pass
                    # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –ª—é–±–æ–º—É –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É —Ç–µ–∫—É—â–µ–º—É —Ç–µ–∫—Å—Ç—É
                    for ct in cur_texts:
                        if not ct:
                            continue
                        if ct in t and isinstance(t[ct], (str, list, tuple)):
                            try:
                                if _set_text_by_type(w, t[ct]):
                                    applied = True
                                    break
                            except Exception:
                                pass
                    if applied:
                        continue

                    # 3) –î–ª—è QComboBox: –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–º–µ–Ω–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –∫–ª—é—á–∞–º –≤ JSON
                    from PyQt6.QtWidgets import QComboBox
                    if isinstance(w, QComboBox):
                        try:
                            for i in range(w.count()):
                                item = w.itemText(i)
                                if item in t and isinstance(t[item], str):
                                    w.setItemText(i, t[item])
                        except Exception:
                            pass

                except Exception:
                    # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –≤–∏–¥–∂–µ—Ç–∞–º–∏
                    continue
        except Exception:
            pass

    def setup_styles(self):
        # –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ç–µ–Ω—è–º–∏
        self.setStyleSheet("""
            QMainWindow {
                background-color: #F0F2F5;
            }
            QGroupBox {
                font-weight: bold;
                font-size: 13px;
                border: 1px solid #DCDFE6;
                border-radius: 6px;
                margin-top: 8px;
                padding-top: 12px;
                background-color: white;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 8px;
                padding: 0 4px;
            }
            QPushButton {
                background-color: #409EFF;
                color: white;
                border: none;
                border-radius: 4px;
                padding: 6px 12px;
                font-size: 13px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #66B1FF;
            }
            QPushButton:pressed {
                background-color: #3A8EE6;
            }
            QLineEdit, QComboBox, QTextEdit {
                border: 1px solid #DCDFE6;
                border-radius: 4px;
                padding: 5px;
                font-size: 13px;
            }
            QProgressBar {
                border: 1px solid #DCDFE6;
                border-radius: 4px;
                text-align: center;
                height: 18px;
                font-size: 12px;
            }
            QProgressBar::chunk {
                background-color: #409EFF;
                border-radius: 3px;
            }
            QTabWidget::pane {
                border: 1px solid #DCDFE6;
                border-radius: 6px;
                background: white;
            }
            QTabBar::tab {
                background: #E4E7ED;
                border: 1px solid #DCDFE6;
                border-bottom: none;
                border-top-left-radius: 4px;
                border-top-right-radius: 4px;
                padding: 6px 12px;
                margin-right: 2px;
                font-size: 13px;
            }
            QTabBar::tab:selected {
                background: white;
                border-bottom: 2px solid #409EFF;
                font-weight: bold;
            }
            QScrollArea {
                border: none;
            }
        """)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–Ω–µ–π –∫ –≥—Ä—É–ø–ø–∞–º
        for group in self.findChildren(QGroupBox):
            shadow = QGraphicsDropShadowEffect()
            shadow.setBlurRadius(8)
            shadow.setXOffset(0)
            shadow.setYOffset(2)
            shadow.setColor(QColor(0, 0, 0, 20))
            group.setGraphicsEffect(shadow)

    def select_input_file(self):
        file, _ = QFileDialog.getOpenFileName(
            self, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª", "", 
            "–í–∏–¥–µ–æ—Ñ–∞–π–ª—ã (*.mp4 *.mkv *.mov *.avi *.flv)"
        )
        if file:
            self.input_path.setText(file)
            self.input_file = file
            # –û–ß–ò–©–ê–ï–ú –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–æ–≤–æ–≥–æ –≤—Ö–æ–¥–Ω–æ–≥–æ
            self.output_path.clear()
            self.output_file = ""
            self.load_video_info(file)
            self.show_video_preview(file)
            self.update_video_settings()
            self.update_audio_settings()

    def select_input_files(self):
        files, _ = QFileDialog.getOpenFileNames(
            self, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—ã", "", 
            "–í–∏–¥–µ–æ—Ñ–∞–π–ª—ã (*.mp4 *.mkv *.mov *.avi *.flv)"
        )
        if files:
            self.input_files = files
            self.input_file = files[0]
            self.input_path.setText(files[0])
            self.output_path.clear()
            self.output_file = ""
            self.load_video_info(files[0])
            self.show_video_preview(files[0])
            self.update_video_settings()
            self.update_audio_settings()

    def select_output_file(self):
        file, _ = QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", "", 
            "–í–∏–¥–µ–æ—Ñ–∞–π–ª—ã (*.mp4 *.mkv *.mov *.avi *.flv)"
        )
        if file:
            self.output_path.setText(file)
            self.output_file = file

    def load_video_info(self, file_path):
        try:
            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            for i in reversed(range(self.info_grid.count())): 
                self.info_grid.itemAt(i).widget().setParent(None)
            
            ffprobe_cmd = getattr(self, "ffprobe_path", "ffprobe")
            cmd = [
                ffprobe_cmd, '-v', 'error', '-show_format',
                '-show_streams', '-of', 'json', file_path
            ]
            result = subprocess.run(
                cmd, capture_output=True, text=True, check=True
            )
            info = json.loads(result.stdout)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            self.video_info = info
            
            # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            streams = info.get('streams', [])
            format_info = info.get('format', {})
            
            # –í–∏–¥–µ–æ –ø–æ—Ç–æ–∫–∏
            video_streams = [s for s in streams if s['codec_type'] == 'video']
            # –ê—É–¥–∏–æ –ø–æ—Ç–æ–∫–∏
            audio_streams = [s for s in streams if s['codec_type'] == 'audio']
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –±–ª–æ–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            blocks = []
            
            # –í–∏–¥–µ–æ –ø–æ—Ç–æ–∫
            if video_streams:
                video_info = "<b>–í–∏–¥–µ–æ –ø–æ—Ç–æ–∫:</b><br>"
                for stream in video_streams:
                    video_info += f"–ö–æ–¥–µ–∫: {stream.get('codec_name', 'N/A')}<br>"
                    video_info += f"–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {stream.get('width', 'N/A')}x{stream.get('height', 'N/A')}<br>"
                    
                    # –ë–∏—Ç—Ä–µ–π—Ç
                    bit_rate = stream.get('bit_rate', 0)
                    try:
                        bit_rate = int(bit_rate) / 1000
                        video_info += f"–ë–∏—Ç—Ä–µ–π—Ç: {bit_rate:.0f} kbps<br>"
                    except:
                        video_info += "–ë–∏—Ç—Ä–µ–π—Ç: N/A<br>"
                    
                    # FPS
                    frame_rate = stream.get('avg_frame_rate', '0/0')
                    try:
                        num, den = map(float, frame_rate.split('/'))
                        fps = num / den if den != 0 else 0
                        video_info += f"FPS: {fps:.2f}<br>"
                    except:
                        video_info += "FPS: N/A<br>"
                    
                    # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                    duration = float(stream.get('duration', 0))
                    video_info += f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.2f} —Å–µ–∫<br><br>"
                blocks.append(video_info)
            
            # –ê—É–¥–∏–æ –ø–æ—Ç–æ–∫–∏
            if audio_streams:
                audio_info = "<b>–ê—É–¥–∏–æ –ø–æ—Ç–æ–∫:</b><br>"
                for i, stream in enumerate(audio_streams):
                    if i > 0:
                        audio_info += "<br>"
                    audio_info += f"–ü–æ—Ç–æ–∫ #{i+1}:<br>"
                    audio_info += f"–ö–æ–¥–µ–∫: {stream.get('codec_name', 'N/A')}<br>"
                    audio_info += f"–ö–∞–Ω–∞–ª—ã: {stream.get('channels', 'N/A')}<br>"
                    
                    # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
                    sample_rate = stream.get('sample_rate', 0)
                    try:
                        sample_rate = int(sample_rate) / 1000
                        audio_info += f"–ß–∞—Å—Ç–æ—Ç–∞: {sample_rate:.1f} kHz<br>"
                    except:
                        audio_info += "–ß–∞—Å—Ç–æ—Ç–∞: N/A<br>"
                    
                    # –ë–∏—Ç—Ä–µ–π—Ç
                    audio_bitrate = stream.get('bit_rate', 0)
                    try:
                        audio_bitrate = int(audio_bitrate) / 1000
                        audio_info += f"–ë–∏—Ç—Ä–µ–π—Ç: {audio_bitrate:.0f} kbps<br>"
                    except:
                        audio_info += "–ë–∏—Ç—Ä–µ–π—Ç: N/A<br>"
                blocks.append(audio_info)
            
            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä
            container_info = "<b>–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä:</b><br>"
            container_info += f"–§–æ—Ä–º–∞—Ç: {format_info.get('format_name', 'N/A')}<br>"
            
            # –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            total_duration = float(format_info.get('duration', 0))
            container_info += f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_duration:.2f} —Å–µ–∫<br>"
            
            # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = int(format_info.get('size', 0)) / (1024 * 1024)
            container_info += f"–†–∞–∑–º–µ—Ä: {file_size:.2f} MB"
            blocks.append(container_info)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            extra_info = ""
            if video_streams:
                extra_info += "<b>–î–æ–ø. –≤–∏–¥–µ–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b><br>"
                for stream in video_streams:
                    extra_info += f"–ü—Ä–æ—Ñ–∏–ª—å: {stream.get('profile', 'N/A')}<br>"
                    extra_info += f"–£—Ä–æ–≤–µ–Ω—å: {stream.get('level', 'N/A')}<br>"
                    extra_info += f"–ü–∏–∫—Å. —Ñ–æ—Ä–º–∞—Ç: {stream.get('pix_fmt', 'N/A')}<br><br>"
            
            if audio_streams:
                extra_info += "<b>–î–æ–ø. –∞—É–¥–∏–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b><br>"
                for stream in audio_streams:
                    extra_info += f"–Ø–∑—ã–∫: {stream.get('tags', {}).get('language', 'N/A')}<br>"
                    extra_info += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {stream.get('tags', {}).get('title', 'N/A')}<br><br>"
            
            if extra_info:
                blocks.append(extra_info)
            
            # –†–∞–∑–º–µ—â–∞–µ–º –±–ª–æ–∫–∏ –≤ —Å–µ—Ç–∫–µ (–ø–æ 3 –≤ —Ä—è–¥)
            row, col = 0, 0
            for block in blocks:
                html_block = f'<div style="word-break:break-all;">{block}</div>'
                label = QLabel(html_block)
                label.setWordWrap(True)
                label.setAlignment(Qt.AlignmentFlag.AlignLeft | Qt.AlignmentFlag.AlignTop)
                label.setStyleSheet("background-color: #F8F9FA; padding: 6px; border-radius: 4px; font-size: 11px;")
                label.setMinimumWidth(180)
                label.setMaximumWidth(220)
                self.info_grid.addWidget(label, row, col)
                
                col += 1
                if col > 2:
                    col = 0
                    row += 1
            
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –≤–∏–¥–∂–µ—Ç
            if col > 0 and col <= 2:
                for i in range(col, 3):
                    empty = QWidget()
                    self.info_grid.addWidget(empty, row, i)
            
        except Exception as e:
            error_label = QLabel(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")
            error_label.setStyleSheet("color: red;")
            self.info_grid.addWidget(error_label, 0, 0)

    def update_video_settings(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ"""
        if not self.video_info:
            return
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        for stream in self.video_info.get('streams', []):
            if stream['codec_type'] == 'video':
                width = stream.get('width', '')
                height = stream.get('height', '')
                if width and height:
                    res_str = f"{width}x{height}"
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ
                    for i in range(self.resolution.count()):
                        if res_str in self.resolution.itemText(i):
                            self.resolution.setCurrentIndex(i)
                            break
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º
                        self.resolution.addItem(f"{res_str} (–∏—Å—Ö–æ–¥–Ω–æ–µ)")
                        self.resolution.setCurrentIndex(self.resolution.count() - 1)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–¥–µ–∫
                codec = stream.get('codec_name', '')
                if codec:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –∫–æ–¥–µ–∫ –≤ —Å–ø–∏—Å–∫–µ
                    for i in range(self.video_codec.count()):
                        if codec in self.video_codec.itemText(i).lower():
                            self.video_codec.setCurrentIndex(i)
                            break
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º
                        self.video_codec.addItem(f"{codec} (–∏—Å—Ö–æ–¥–Ω—ã–π)")
                        self.video_codec.setCurrentIndex(self.video_codec.count() - 1)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∏—Ç—Ä–µ–π—Ç
                bitrate = stream.get('bit_rate', 0)
                try:
                    bitrate = int(bitrate) // 1000  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ kbps
                    bitrate_str = f"{bitrate}k"
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –∫–æ–º–±–æ–±–æ–∫—Å
                    self.bitrate.setCurrentText(bitrate_str)
                except:
                    pass
                break

    def update_audio_settings(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ"""
        if not self.video_info:
            return
            
        audio_streams = [s for s in self.video_info.get('streams', []) if s['codec_type'] == 'audio']
        if not audio_streams:
            return
            
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫
        stream = audio_streams[0]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–¥–µ–∫
        codec = stream.get('codec_name', '')
        if codec:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –∫–æ–¥–µ–∫ –≤ —Å–ø–∏—Å–∫–µ
            for i in range(self.audio_codec.count()):
                if codec in self.audio_codec.itemText(i).lower():
                    self.audio_codec.setCurrentIndex(i)
                    break
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º
                self.audio_codec.addItem(f"{codec} (–∏—Å—Ö–æ–¥–Ω—ã–π)")
                self.audio_codec.setCurrentIndex(self.audio_codec.count() - 1)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∏—Ç—Ä–µ–π—Ç
        bitrate = stream.get('bit_rate', 0)
        try:
            bitrate = int(bitrate) // 1000  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ kbps
            bitrate_str = f"{bitrate}k"
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –∫–æ–º–±–æ–±–æ–∫—Å
            self.audio_bitrate.setCurrentText(bitrate_str)
        except:
            pass
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
        channels = stream.get('channels', 0)
        if channels:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –≤ —Å–ø–∏—Å–∫–µ
            for i in range(self.audio_channels.count()):
                if str(channels) in self.audio_channels.itemText(i):
                    self.audio_channels.setCurrentIndex(i)
                    break
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º
                self.audio_channels.addItem(f"{channels} –∫–∞–Ω–∞–ª–æ–≤ (–∏—Å—Ö–æ–¥–Ω–æ–µ)")
                self.audio_channels.setCurrentIndex(self.audio_channels.count() - 1)

    def show_video_preview(self, file_path):
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø—Ä–µ–≤—å—é
            preview_path = os.path.join(os.path.dirname(file_path), "preview.jpg")
            ffmpeg_cmd = getattr(self, "ffmpeg_path", "ffmpeg")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ffmpeg –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏–±–æ –∫–∞–∫ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å, –ª–∏–±–æ –≤ PATH
            import shutil as _shutil
            if os.path.isabs(ffmpeg_cmd):
                if not os.path.exists(ffmpeg_cmd):
                    raise FileNotFoundError(ffmpeg_cmd)
            else:
                if _shutil.which(ffmpeg_cmd) is None:
                    raise FileNotFoundError(ffmpeg_cmd)
            cmd = [
                ffmpeg_cmd, '-i', file_path, 
                '-ss', '00:00:01', '-vframes', '1',
                '-q:v', '2', preview_path
            ]
            subprocess.run(cmd, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            
            pixmap = QPixmap(preview_path)
            if not pixmap.isNull():
                # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø—Ä–µ–≤—å—é
                pixmap = pixmap.scaled(
                    300, 180, 
                    Qt.AspectRatioMode.KeepAspectRatio,
                    Qt.TransformationMode.SmoothTransformation
                )
                self.preview_label.setPixmap(pixmap)
            os.remove(preview_path)
            
        except Exception as e:
            self.log_text.append(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é: {str(e)}")
            self.preview_label.setText("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–≤—å—é")

    def check_codec_available(self, ffmpeg_cmd, codec_name):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ–¥–µ–∫ –≤ ffmpeg. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'libx264' –≤ –∫–∞—á–µ—Å—Ç–≤–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ñ–æ–ª–±—ç–∫–∞."""
        try:
            # –ë—ã—Å—Ç—Ä–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω nvenc ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ nvcuda.dll –Ω–∞ Windows
            if 'nvenc' in codec_name.lower() and platform.system() == 'Windows':
                try:
                    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä–∞–π–≤–µ—Ä CUDA
                    ctypes.WinDLL('nvcuda.dll')
                except Exception:
                    return 'libx264'

            # –ó–∞–ø—Ä–æ—Å–∏–º —Å–ø–∏—Å–æ–∫ —ç–Ω–∫–æ–¥–µ—Ä–æ–≤
            proc = subprocess.run([ffmpeg_cmd, '-hide_banner', '-encoders'], capture_output=True, text=True, timeout=5)
            out = proc.stdout + proc.stderr
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å –∏–º–µ–Ω–µ–º –∫–æ–¥–µ–∫–∞
            # –£ —ç–Ω–∫–æ–¥–µ—Ä–æ–≤ —Ñ–æ—Ä–º–∞—Ç: " V..... h264_nvenc"
            if codec_name in out:
                return codec_name
            # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É –∏–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä h264 –¥–ª—è libx264)
            if codec_name.lower() in out.lower():
                return codec_name
        except Exception:
            pass
        return 'libx264'

    def map_audio_codec(self, ffmpeg_cmd, codec_name):
        """–°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –∫–æ–¥–µ–∫–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º —ç–Ω–∫–æ–¥–µ—Ä–æ–º ffmpeg –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'copy' –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è, –ª–∏–±–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–Ω–∫–æ–¥–µ—Ä, –ª–∏–±–æ —Ä–∞–∑—É–º–Ω—ã–π —Ñ–æ–ª–±—ç–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä 'aac').
        """
        if not codec_name:
            return 'aac'
        name = str(codec_name).lower()
        # –ü—Ä—è–º—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        if name in ('copy', '–∏—Å—Ö–æ–¥–Ω—ã–π', 'original'):
            return 'copy'

        # –ë–∞–∑–æ–≤–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —É–¥–æ–±–Ω—ã—Ö –∏–º—ë–Ω –∫ —Ä–µ–∞–ª—å–Ω—ã–º —ç–Ω–∫–æ–¥–µ—Ä–∞–º
        mapping = {
            'opus': 'libopus',
            'mp3': 'libmp3lame',
            'aac': 'aac',
            'flac': 'flac',
            'vorbis': 'libvorbis',
            'ac3': 'ac3',
            'wav': 'pcm_s16le',
            'wma': 'wmav2'
        }
        mapped = mapping.get(name, name)

        # –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ ffmpeg -encoders
        out = ''
        try:
            proc = subprocess.run([ffmpeg_cmd, '-hide_banner', '-encoders'], capture_output=True, text=True, timeout=5)
            out = (proc.stdout or '') + (proc.stderr or '')
        except Exception:
            out = ''

        # –ï—Å–ª–∏ —ç–Ω–∫–æ–¥–µ—Ä –Ω–∞–π–¥–µ–Ω –≤ –≤—ã–≤–æ–¥–µ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        try:
            if mapped in out or mapped.lower() in out.lower():
                return mapped
        except Exception:
            pass

        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ä–∞–∑—É–º–Ω—ã–π —Ñ–æ–ª–±—ç–∫ –∏–∑ —á–∞—Å—Ç–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        for candidate in ('aac', 'libopus', 'libvorbis', 'libmp3lame'):
            try:
                if candidate in out.lower():
                    return candidate
            except Exception:
                continue

        # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞: –≤–µ—Ä–Ω—É—Ç—å mapped –∫–∞–∫ –µ—Å—Ç—å
        return mapped

    def start_video_render(self):
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ ‚Äî –ø–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        files_to_render = getattr(self, "input_files", None)
        if files_to_render and len(files_to_render) > 1:
            self.batch_files = files_to_render
            self.batch_index = 0
            self.batch_total = len(files_to_render)
            self.batch_settings = {
                "res_text": self.resolution.currentText(),
                "video_codec": self.video_codec.currentText(),
                "format": self.format.currentText(),
                "bitrate": self.bitrate.currentText(),
                "audio_codec": self.audio_codec.currentText(),
                "audio_bitrate": self.audio_bitrate.currentText(),
                "audio_channels": self.audio_channels.currentText()
            }
            self.render_next_in_batch()
            return

        files_to_render = self.input_files if self.input_files else [self.input_file]
        if not files_to_render or not all(os.path.exists(f) for f in files_to_render):
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—ã!")
            return

        self.batch_index = 0
        self.batch_total = len(files_to_render)
        self.batch_files = files_to_render
        self.batch_settings = {
            "res_text": self.resolution.currentText(),
            "video_codec": self.video_codec.currentText(),
            "format": self.format.currentText(),
            "bitrate": self.bitrate.currentText(),
            "audio_codec": self.audio_codec.currentText(),
            "audio_bitrate": self.audio_bitrate.currentText(),
            "audio_channels": self.audio_channels.currentText()
        }
        self.render_next_in_batch()

    def render_next_in_batch(self):
        if self.batch_index >= self.batch_total:
            self.batch_status_label.setText("–ü–∞–∫–µ—Ç–Ω–æ–µ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            self.log_text.append("–ü–∞–∫–µ—Ç–Ω–æ–µ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            self.progress_bar.setValue(100)
            return

        input_file = self.batch_files[self.batch_index]
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        self.batch_status_label.setText(
            f"–í–∏–¥–µ–æ {self.batch_index+1} –∏–∑ {self.batch_total}: {os.path.basename(input_file)}"
        )
        base, ext = os.path.splitext(input_file)
        i = 1
        while True:
            candidate = f"{base}_{i}{ext}"
            if not os.path.exists(candidate):
                output_file = candidate
                break
            i += 1

        self.output_file = output_file
        self.output_path.setText(output_file)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É FFmpeg —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        settings = self.batch_settings
        resolutions = {
            "4K": "3840:2160",
            "1440p": "2560:1440",
            "1080p": "1920:1080",
            "720p": "1280:720",
            "480p": "854:480",
            "360p": "640:360",
            "240p": "426:240",
            "144p": "256:144",
            "128p": "256:128"
        }
        ffmpeg_cmd = getattr(self, "ffmpeg_path", "ffmpeg")
        cmd = [ffmpeg_cmd, '-i', input_file]
        # –í–∏–¥–µ–æ –∫–æ–¥–µ–∫
        if "–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π" not in settings["video_codec"] and "–∏—Å—Ö–æ–¥–Ω—ã–π" not in settings["video_codec"]:
            selected_codec = settings["video_codec"].split()[0]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–µ–∫–∞ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–º–µ–Ω—è–µ–º
            safe_codec = self.check_codec_available(ffmpeg_cmd, selected_codec)
            if safe_codec != selected_codec:
                self.log_text.append(f"‚ö†Ô∏è –ö–æ–¥–µ–∫ {selected_codec} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —ç—Ç–æ–π —Å–∏—Å—Ç–µ–º–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º {safe_codec}.")
            cmd.extend(['-c:v', safe_codec])
        # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        res_found = False
        for key in resolutions:
            if key in settings["res_text"]:
                scale = resolutions[key]
                cmd.extend([
                    '-vf',
                    f"scale={scale}:force_original_aspect_ratio=decrease,pad={scale}:(ow-iw)/2:(oh-ih)/2"
                ])
                res_found = True
                break
        if not res_found and 'x' in settings["res_text"]:
            res = settings["res_text"].split()[0]
            cmd.extend([
                '-vf',
                f"scale={res}:force_original_aspect_ratio=decrease,pad={res}:(ow-iw)/2:(oh-ih)/2"
            ])
        # –ë–∏—Ç—Ä–µ–π—Ç –≤–∏–¥–µ–æ
        if "–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π" not in settings["bitrate"] and "–∏—Å—Ö–æ–¥–Ω—ã–π" not in settings["bitrate"]:
            cmd.extend(['-b:v', settings["bitrate"].split()[0]])
        # –ê—É–¥–∏–æ –∫–æ–¥–µ–∫
        if "–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π" not in settings["audio_codec"] and "–∏—Å—Ö–æ–¥–Ω—ã–π" not in settings["audio_codec"]:
            requested_audio = settings["audio_codec"].split()[0]
            safe_audio = self.map_audio_codec(ffmpeg_cmd, requested_audio)
            if safe_audio == 'copy':
                cmd.extend(['-c:a', 'copy'])
            else:
                cmd.extend(['-c:a', safe_audio])
        # –ë–∏—Ç—Ä–µ–π—Ç –∞—É–¥–∏–æ
        if "–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π" not in settings["audio_bitrate"] and "–∏—Å—Ö–æ–¥–Ω—ã–π" not in settings["audio_bitrate"]:
            # –°–æ—Ö—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–∏–¥–∞ '128k'
            ab = settings["audio_bitrate"].split()[0]
            if ab.endswith('k'):
                try:
                    n = int(ab[:-1])
                    if n > 0:
                        cmd.extend(['-b:a', f"{n}k"])
                except Exception:
                    pass
        # –ö–∞–Ω–∞–ª—ã –∞—É–¥–∏–æ
        if "–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π" not in settings["audio_channels"] and "–∏—Å—Ö–æ–¥–Ω–æ–µ" not in settings["audio_channels"]:
            if "–º–æ–Ω–æ" in settings["audio_channels"]:
                cmd.extend(['-ac', '1'])
            elif "—Å—Ç–µ—Ä–µ–æ" in settings["audio_channels"]:
                cmd.extend(['-ac', '2'])
            elif "5.1" in settings["audio_channels"]:
                cmd.extend(['-ac', '6'])
            elif "7.1" in settings["audio_channels"]:
                cmd.extend(['-ac', '8'])
        # –§–æ—Ä–º–∞—Ç –∏ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
        cmd.append(output_file)

        self.log_text.clear()
        self.log_text.append(f"–ù–∞—á–∞—Ç–æ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ {self.batch_index+1}/{self.batch_total}...")
        self.log_text.append("–ö–æ–º–∞–Ω–¥–∞: " + " ".join(cmd))
        self.progress_bar.setValue(0)

        self.worker = FFmpegWorker(cmd)
        self.worker.progressUpdated.connect(self.update_progress)
        self.worker.outputReceived.connect(self.log_text.append)
        self.worker.finished.connect(self.batch_render_finished)
        self.worker.start()

    def batch_render_finished(self, success):
        if success:
            self.log_text.append(f"–í–∏–¥–µ–æ {self.batch_index+1} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ!")
        else:
            self.log_text.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ {self.batch_index+1}!")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ {self.batch_index+1}")

        self.batch_index += 1
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
        if self.batch_index < self.batch_total:
            next_file = self.batch_files[self.batch_index]
            self.batch_status_label.setText(
                f"–í–∏–¥–µ–æ {self.batch_index+1} –∏–∑ {self.batch_total}: {os.path.basename(next_file)}"
            )
            self.render_next_in_batch()
        else:
            self.batch_status_label.setText("–ü–∞–∫–µ—Ç–Ω–æ–µ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞–π–ª–∞
            if success and self.settings["show_video_notifications"]:
                dialog = NotificationDialog(self.output_file, self)
                dialog.exec()

    def extract_audio(self):
        if not self.input_file:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª!")
            return
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∞—É–¥–∏–æ
        base_name = os.path.splitext(self.input_file)[0]
        audio_format = self.audio_format.currentText()
        output_file = f"{base_name}.{audio_format}"
        
        # –ö–æ–º–∞–Ω–¥–∞ FFmpeg
        ffmpeg_cmd = getattr(self, "ffmpeg_path", "ffmpeg")
        # –í—ã–±–∏—Ä–∞–µ–º —ç–Ω–∫–æ–¥–µ—Ä –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        selected = audio_format.lower()
        chosen = self.map_audio_codec(ffmpeg_cmd, selected)
        cmd = [ffmpeg_cmd, '-i', self.input_file, '-vn']
        if chosen == 'copy':
            cmd.extend(['-acodec', 'copy'])
        else:
            cmd.extend(['-acodec', chosen])
        cmd.append(output_file)
        
        self.log_text.clear()
        self.log_text.append("–ù–∞—á–∞—Ç–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ...")
        self.log_text.append("–ö–æ–º–∞–Ω–¥–∞: " + " ".join(cmd))
        self.progress_bar.setValue(0)
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.worker = FFmpegWorker(cmd)
        self.worker.progressUpdated.connect(self.update_progress)
        self.worker.outputReceived.connect(self.log_text.append)
        self.worker.finished.connect(self.audio_extraction_finished)
        self.worker.start()

    def update_progress(self, value):
        self.progress_bar.setValue(value)

    def render_finished(self, success):
        if success:
            self.log_text.append("–ü–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
            if self.settings["show_video_notifications"]:
                dialog = NotificationDialog(self.output_file, self)
                dialog.exec()
        else:
            self.log_text.append("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ!")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ")

    def audio_extraction_finished(self, success):
        if success:
            self.log_text.append("–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ!")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É
            base_name = os.path.splitext(self.input_file)[0]
            audio_format = self.audio_format.currentText()
            output_file = f"{base_name}.{audio_format}"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
            if self.settings["show_audio_notifications"]:
                dialog = NotificationDialog(output_file, self)
                dialog.exec()
        else:
            self.log_text.append("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ!")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ")

class FFmpegWorker(QThread):
    progressUpdated = pyqtSignal(int)
    outputReceived = pyqtSignal(str)
    finished = pyqtSignal(bool)

    def __init__(self, command):
        super().__init__()
        self.command = command

    def run(self):
        try:
            # –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—É—Å–∫–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞/–∫–æ–º–∞–Ω–¥—ã –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å [Errno 2]
            import shutil as _shutil
            exe = self.command[0] if isinstance(self.command, (list, tuple)) and len(self.command) > 0 else None
            if exe:
                if os.path.isabs(exe) and not os.path.exists(exe):
                    self.outputReceived.emit(f"–û—à–∏–±–∫–∞: –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {exe}")
                    self.finished.emit(False)
                    return
                if not os.path.isabs(exe) and _shutil.which(exe) is None:
                    self.outputReceived.emit(f"–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ PATH: {exe}")
                    self.finished.emit(False)
                    return

            process = subprocess.Popen(
                self.command,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                universal_newlines=True,
                bufsize=1,
                creationflags=subprocess.CREATE_NO_WINDOW if sys.platform == 'win32' else 0
            )

            total_duration = None
            while True:
                line = process.stdout.readline()
                if not line:
                    break
                    
                self.outputReceived.emit(line.strip())
                
                # –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                if "Duration:" in line:
                    parts = line.split("Duration:")[1].split(",")[0].strip()
                    try:
                        h, m, s = parts.split(":")
                        total_duration = int(h)*3600 + int(m)*60 + float(s)
                    except:
                        pass
                    
                elif "time=" in line:
                    time_str = line.split("time=")[1].split()[0]
                    try:
                        h, m, s = time_str.split(":")
                        current_time = int(h)*3600 + int(m)*60 + float(s)
                        
                        if total_duration and total_duration > 0:
                            progress = int((current_time / total_duration) * 100)
                            self.progressUpdated.emit(min(progress, 100))
                    except:
                        pass

            process.wait()
            self.finished.emit(process.returncode == 0)
            
        except Exception as e:
            self.outputReceived.emit(f"–û—à–∏–±–∫–∞: {str(e)}")
            self.finished.emit(False)

# ========== –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ==========
if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setStyle("Fusion")

    ffmpeg_path = ""
    ffprobe_path = ""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ config.json
    if os.path.exists(CONFIG_FILE):
        try:
            with open(CONFIG_FILE, "r", encoding="utf-8") as f:
                cfg = json.load(f)
            if cfg.get("ffmpeg_installed"):
                ffmpeg_path = cfg.get("ffmpeg_path", "")
                ffprobe_path = cfg.get("ffprobe_path", "")
        except:
            pass

    # –ï—Å–ª–∏ FFmpeg –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∫–∞
    if not ffmpeg_path or not os.path.exists(ffmpeg_path):
        setup_dialog = FFmpegSetupDialog()
        setup_dialog.exec()

        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if os.path.exists(CONFIG_FILE):
            with open(CONFIG_FILE, "r", encoding="utf-8") as f:
                cfg = json.load(f)
                ffmpeg_path = cfg.get("ffmpeg_path", "")
                ffprobe_path = cfg.get("ffprobe_path", "")

    # –ï—Å–ª–∏ –≤—Å—ë –æ–∫ ‚Äî –∑–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
    if ffmpeg_path and os.path.exists(ffmpeg_path):
        window = VideoConverter()
        window.ffmpeg_path = ffmpeg_path
        window.ffprobe_path = ffprobe_path if ffprobe_path else ffmpeg_path.replace("ffmpeg.exe", "ffprobe.exe")
        window.show()
        sys.exit(app.exec())
    else:
        QMessageBox.critical(None, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å FFmpeg.")
        sys.exit(1)